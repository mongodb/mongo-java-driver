/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
final Integer DEFAULT_JDK_VERSION = 17

def javaMainProjects = subprojects - project(":util:taglets")

allprojects {

    def javaVersion = (findProperty("javaVersion") ?: DEFAULT_JDK_VERSION.toString()).toInteger()
    project.pluginManager.withPlugin("java") {
        if (!project.pluginManager.hasPlugin("scala")) {
            logger.info("Compiling ${project.name} using JDK${DEFAULT_JDK_VERSION}")
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(DEFAULT_JDK_VERSION)
                }
            }
        }
    }
    project.pluginManager.withPlugin('org.graalvm.buildtools.native') {
        def minRequiredGraalVMJavaVersion = 21
        // By configuring the toolchains for the `org.graalvm.buildtools.native` plugin
        // conditionally, we avoid Gradle errors caused by it failing to locate an installed GraalVM
        // for Java SE older than 21. One situation when this is relevant is building from an IDE,
        // where the `DEFAULT_JDK_VERSION` is likely used.
        if (javaVersion >= minRequiredGraalVMJavaVersion) {
            def javaLanguageVersion = JavaLanguageVersion.of(javaVersion)
            // `JvmVendorSpec.GRAAL_VM` matches only GraalVM Community (https://github.com/graalvm/graalvm-ce-builds/releases),
            // and does not match any other GraalVM distribution.
            // That is, Gradle fails to locate any other installed distribution of GraalVM.
            // Furthermore, there is no other way to express via the Gradle toolchain functionality
            // that GraalVM must be used. The documentation of the `org.graalvm.buildtools.native` plugin
            // says the following about this limitation:
            // "be aware that the toolchain detection cannot distinguish between GraalVM JDKs
            // and standard JDKs without Native Image support:
            // if you have both installed on the machine, Gradle may randomly pick one or the other".
            // Fortunately, `JvmVendorSpec.GRAAL_VM` makes things less hideous than that.
            //
            // The documentation of the `org.graalvm.buildtools.native` plugin mentions
            // the environment variable `GRAALVM_HOME` as an alternative to Gradle toolchain functionality.
            // I was unable to find a way to stop relying on the toolchain specification requiring `JvmVendorSpec.GRAAL_VM`
            // even with `GRAALVM_HOME`.
            def graalVendor = JvmVendorSpec.GRAAL_VM
            graalvmNative {
                agent {
                    java {
                        toolchain {
                            languageVersion = javaLanguageVersion
                            vendor = graalVendor
                        }
                    }
                }
                binaries {
                    configureEach {
                        javaLauncher = javaToolchains.launcherFor {
                            languageVersion = javaLanguageVersion
                            vendor = graalVendor
                        }
                    }
                }
            }
        }
    }

    if (project == project(":bson-record-codec")) {
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
            options.release.set(17)
        }
    } else if (project.name == 'graalvm-native-image-app') {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.release.set(DEFAULT_JDK_VERSION)
        }
    } else if (project in javaMainProjects) {
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
            options.release.set(8)
        }

        // Work around for: https://github.com/gradle/gradle/issues/15703
        tasks.withType(GroovyCompile) {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
        }
    }

    tasks.withType(Test) {
        javaLauncher.set(javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        })
    }

}
