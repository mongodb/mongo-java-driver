/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'eclipse'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:7.0.0'
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:6.0.15"
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:5.1.2'

        // Scala plugins
        classpath "com.adtran:scala-multiversion-plugin:2.0.4"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.14.0"

        // kotlin plugins
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10"
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.10"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.8.10"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.21.0"

        // Test logging plugin
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.0'
    }
}

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

ext {
    configDir = new File(rootDir, 'config')
    jnrUnixsocketVersion = '0.38.17'
    nettyVersion = '4.1.87.Final'
    snappyVersion = '1.1.10.3'
    zstdVersion = '1.5.5-3'
    awsSdkV2Version = '2.18.9'
    awsSdkV1Version = '1.12.337'
    projectReactorVersion = '2022.0.0'
    junitBomVersion = '5.10.2'
    logbackVersion = '1.3.14'
    graalSdkVersion = '24.0.0'
    gitVersion = getGitVersion()
}

def configDir = ext.configDir
def utilProjects = project(":util").allprojects
def coreProjects = subprojects - utilProjects
def scalaProjects = subprojects.findAll { it.name.contains('scala') }
def javaProjects = subprojects - scalaProjects
def javaMainProjects = javaProjects - utilProjects
def javaCodeCheckedProjects = javaMainProjects.findAll { !['driver-benchmarks', 'driver-workload-executor', 'driver-lambda'].contains(it.name) }
def javaAndScalaTestedProjects = javaCodeCheckedProjects + scalaProjects

configure(coreProjects) {
    apply plugin: 'idea'

    group = 'org.mongodb'
    version = '5.3.0-SNAPSHOT'

    repositories {
        mavenLocal()
        google()
        mavenCentral()

        // Uncomment this to test with a snapshot build of mongodb-crypt
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            content {
                includeGroup "org.mongodb"
            }
        }
    }
}

configure(javaProjects) {
    apply plugin: 'java-library'

    sourceSets {
        main {
            java.srcDirs = ['src/main']
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

}

configure(scalaProjects) {
    apply plugin: 'scala'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: "com.adtran.scala-multiversion-plugin"
    apply plugin: "com.diffplug.spotless"

    group = 'org.mongodb.scala'

    dependencies {
        api ('org.scala-lang:scala-library:%scala-version%')
        api ('org.scala-lang:scala-reflect:%scala-version%')

        testImplementation(platform("org.junit:junit-bom:$junitBomVersion"))
        testImplementation("org.junit.vintage:junit-vintage-engine")

        testImplementation('org.scalatest:scalatest-flatspec_%%:3.2.9')
        testImplementation('org.scalatest:scalatest-shouldmatchers_%%:3.2.9')
        testImplementation('org.scalatestplus:junit-4-13_%%:3.2.9.0')
        testImplementation('org.scalatestplus:mockito-3-12_%%:3.2.10.0')
        testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
        testImplementation('org.reflections:reflections:0.9.10')
    }

    test{
        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage')
        }
    }

    spotless {
        scala {
            scalafmt().configFile("$configDir/scala/scalafmt.conf")
        }
    }
    compileScala.dependsOn('spotlessApply')
    compileTestScala.dependsOn('spotlessApply')

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.deprecation = false
        if(scalaVersion.startsWith("2.11")) {
            scalaCompileOptions.additionalParameters = [
                    // support static methods in interfaces
                    "-target:jvm-1.8"
            ]
        }
        if(scalaVersion.startsWith("2.13")) {
            scalaCompileOptions.additionalParameters = [
                    "-feature",
                    "-unchecked",
                    "-language:reflectiveCalls",
                    "-Wconf:cat=deprecation:ws",
                    "-Wconf:msg=While parsing annotations in:silent",
                    "-Xlint:strict-unsealed-patmat"
            ]
        }

    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

configure(javaMainProjects) {
    apply plugin: 'nebula.optional-base'
    apply plugin: 'java-library'

    dependencies {
        compileOnly 'com.google.code.findbugs:jsr305:1.3.9'
        api 'org.slf4j:slf4j-api:1.7.6', optional
        testImplementation 'com.google.code.findbugs:jsr305:1.3.9'

        // https://issues.apache.org/jira/browse/GROOVY-10194
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.9'
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all']
    }
}

configure(javaAndScalaTestedProjects) {
    /* Testing */
    tasks.withType(Test) {
        systemProperties(System.getProperties().findAll { it.key.toString().startsWith("org.mongodb.") })
        systemProperty('jna.library.path', System.getProperty('jna.library.path'))

        project.ext.buildingWith = { propertyName ->
            project.hasProperty(propertyName) && project.property(propertyName).toBoolean()
        }

        if (project.buildingWith('ssl.enabled')) {
            if (project.hasProperty('ssl.keyStoreType')) {
                systemProperties(
                        'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                        'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                        'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword')
                )
            }
            if (project.hasProperty('ssl.trustStoreType')) {
                systemProperties(
                        'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                        'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                        'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
                )
            }
            if (project.hasProperty('ocsp.property')) {
                systemProperties(
                        'org.mongodb.test.ocsp.tls.should.succeed': project.property('ocsp.tls.should.succeed'),
                        'java.security.properties': file(project.property('ocsp.property')),
                        'com.sun.net.ssl.checkRevocation': project.property('ssl.checkRevocation'),
                        'jdk.tls.client.enableStatusRequestExtension': project.property('client.enableStatusRequestExtension'),
                        'jdk.tls.client.protocols': project.property('client.protocols')
                )
            }
        }

        if (project.buildingWith('gssapi.enabled')) {
            systemProperties(
                    'sun.security.krb5.debug': project.getProperty('sun.security.krb5.debug'),
                    'javax.security.auth.useSubjectCredsOnly': "false",
                    'java.security.krb5.kdc': project.getProperty('krb5.kdc'),
                    'java.security.krb5.realm': project.getProperty('krb5.realm'),
                    'java.security.auth.login.config': project.getProperty('auth.login.config'),
            )
        }
    }
}

configure(javaCodeCheckedProjects) {
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'com.adarshr.test-logger'

    dependencies {
        testImplementation(platform("org.junit:junit-bom:$junitBomVersion"))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testImplementation('org.junit.jupiter:junit-jupiter-params')
        testImplementation('org.junit.jupiter:junit-jupiter-engine')
        testImplementation('org.junit.vintage:junit-vintage-engine')

        testImplementation platform('org.spockframework:spock-bom:2.1-groovy-3.0')
        testImplementation 'org.spockframework:spock-core'
        testImplementation 'org.spockframework:spock-junit4'
        if ('8'.equals(findProperty("javaVersion"))) {
            testImplementation("org.mockito:mockito-core:4.6.1")
            testImplementation("org.mockito:mockito-inline:4.6.1")
        } else {
            testImplementation("org.mockito:mockito-core:5.11.0")
        }
        testImplementation 'cglib:cglib-nodep:2.2.2'
        testImplementation 'org.objenesis:objenesis:1.3'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
        testImplementation project(':util:spock') //Adding categories to classpath
    }

    sourceSets {
        test {
            groovy.srcDirs = ['src/test/functional', 'src/test/unit']
        }
    }

    /* Testing */
    tasks.withType(Test) {
        maxHeapSize = "4g"
        maxParallelForks = 1

        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage', 'spock')
            excludeTags('Slow')
        }
        systemProperty('spock.configuration', "${configDir}/spock/ExcludeSlow.groovy")

        jacoco { enabled = false }

        testLogging {
            exceptionFormat = 'full'
            events("passed", "skipped", "failed")
        }

        testlogger {
            theme 'standard'
            showExceptions false
            showStackTraces false
            showFullStackTraces false
        }
    }

    task testSlowOnly(type: Test) {
        dependsOn('testSlowGroovy')
        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage')
            includeTags('Slow')
        }
    }

    task testSlowGroovy(type: Test) {
        useJUnitPlatform {
            includeEngines( 'spock')
        }
        systemProperty('spock.configuration', "${configDir}/spock/OnlySlow.groovy")
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(testCoverage)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testCoverage(dependsOn: test)

    /* Code quality */
    tasks.withType(Checkstyle) {
        reports {
            xml.required = true
            html.required = true
        }
    }

    checkstyle {
        toolVersion = "9.1"
    }

    spotbugs {
        if (!project.buildingWith('ssdlcReport.enabled')) {
            excludeFilter = new File(configDir, 'spotbugs/exclude.xml')
        }
    }

    codenarc {
        toolVersion = '1.6.1'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    spotbugsMain {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
            sarif.enabled = project.buildingWith('ssdlcReport.enabled')
        }
    }

    spotbugsTest {
        enabled = false
    }
}

def getGitVersion() {
    def describeStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always', '--dirty'
        standardOutput = describeStdOut
    }
    describeStdOut.toString().substring(1).trim()
}

apply from: 'gradle/javaToolchain.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/deploy.gradle'
apply from: 'gradle/javadoc.gradle'
