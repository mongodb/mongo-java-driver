/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Configures publishing of the main java projects
 */

// Publishing helpers
ext {
    configurePom = { project ->
        { ->
                name = project.hasProperty('pomName') ? project.getProperty('pomName') : project.name
                description = project.description
                url = project.hasProperty('pomURL') ? project.getProperty('pomURL') : 'https://www.mongodb.com/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    url = 'https://github.com/mongodb/mongo-java-driver'
                    connection = 'scm:https://github.com/mongodb/mongo-java-driver.git'
                    developerConnection = 'scm:git@github.com:mongodb/mongo-java-driver.git'
                }
                developers {
                    developer {
                        name = 'Various'
                        organization = 'MongoDB'
                    }
                }
            }
    }
    configureMavenRepositories = { project ->
        { ->
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            maven {
                url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username project.hasProperty('nexusUsername') ? project.getProperty('nexusUsername') : ''
                    password project.hasProperty('nexusPassword') ? project.getProperty('nexusPassword') : ''
                }
            }

            maven {
                url = "$rootDir/build/repo"
            }
        }
    }
    configureJarManifestAttributes = { project ->
        { ->
            manifest.attributes['-exportcontents'] =  "*;-noimport:=true"
            manifest.attributes['Build-Version'] =  project.gitVersion
            manifest.attributes['Bundle-Version'] =  project.version
            manifest.attributes['Bundle-Name'] =  project.archivesBaseName
            manifest.attributes['Bundle-SymbolicName'] =  project.group + '.' + project.archivesBaseName
        }
    }
}


def projectNamesNotToBePublished = ["driver-benchmarks", "driver-lambda", "driver-workload-executor", "graalvm-native-image-app", "util",
                                    "spock", "taglets"]
def publishedProjects = subprojects.findAll { !projectNamesNotToBePublished.contains(it.name) }
def scalaProjects = publishedProjects.findAll { it.name.contains('scala') }
def javaProjects = publishedProjects - scalaProjects
def projectsWithManifest = publishedProjects.findAll {it.name != 'driver-legacy' }

configure(javaProjects) { project ->
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourcesJar(type: Jar) {
        from project.sourceSets.main.allJava
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from project.components.java
                artifact sourcesJar
                artifact javadocJar

                suppressPomMetadataWarningsFor("dateTimeSupportApiElements")
                suppressPomMetadataWarningsFor("dateTimeSupportRuntimeElements")

                suppressPomMetadataWarningsFor("jsonSupportApiElements")
                suppressPomMetadataWarningsFor("jsonSupportRuntimeElements")

                suppressPomMetadataWarningsFor("mongoCryptSupportApiElements")
                suppressPomMetadataWarningsFor("mongoCryptSupportRuntimeElements")
            }
        }

        repositories configureMavenRepositories(project)
    }

    afterEvaluate {
        publishing.publications.mavenJava.artifactId = project.archivesBaseName
        publishing.publications.mavenJava.pom configurePom(project)
        signing {
            useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
            sign publishing.publications.mavenJava
        }
    }
}

configure(scalaProjects) { project ->
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourcesJar(type: Jar) {
        from project.sourceSets.main.allScala
        classifier = 'sources'
    }

    task scaladocJar(type: Jar) {
        from scaladoc
        classifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName.contains('bson') ? 'mongo-scala-bson' : 'mongo-scala-driver'
                from project.components.java
                artifact sourcesJar
                artifact scaladocJar
            }
        }

        repositories configureMavenRepositories(project)
    }

    afterEvaluate {
        publishing.publications.mavenJava.pom configurePom(project)
        signing {
            useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
            sign publishing.publications.mavenJava
        }
    }
}


configure(projectsWithManifest) { project ->
    apply plugin: 'biz.aQute.bnd.builder'
    afterEvaluate {
        jar configureJarManifestAttributes(project)
    }
}
