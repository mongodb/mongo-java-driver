/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "A Scala wrapper of the MongoDB Reactive Streams Java driver"
archivesBaseName = 'mongo-scala-driver'


dependencies {
    api project(path: ':bson-scala', configuration: 'default')
    api project(path: ':driver-reactive-streams', configuration: 'default')
    compileOnly 'com.google.code.findbugs:jsr305:1.3.9'

    testImplementation project(':driver-sync')
    testImplementation project(':bson').sourceSets.test.output
    testImplementation project(':driver-sync').sourceSets.test.output
    testImplementation project(':driver-core').sourceSets.test.output
    testImplementation project(':driver-reactive-streams').sourceSets.test.output
    testRuntimeOnly project(path: ':driver-core', configuration: 'consumableTestRuntimeOnly')
}

sourceSets {
    integrationTest {
        scala.srcDir file('src/integration/scala')
        scala {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

test {
    maxParallelForks = 1
}

tasks.withType(Test) {
    doFirst {
        println("Running Test task using scala version: $scalaVersion")
    }
}

tasks.withType(ScalaCompile) {
    if(scalaVersion.startsWith("2.11")) {
        // Better support SAM style closures in scala 2.11
        scalaCompileOptions.additionalParameters.addAll([
                // Better support SAM style closures in scala 2.11
                "-Xexperimental"
        ])
    }
}

task integrationTest(type: Test) {
    delete 'build/test-integration'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn integrationTest

// ===================
//     Scala checks
// ===================
tasks.register("scalaCheck") {
    description = "Runs all the Scala checks"
    group = "verification"

    dependsOn("clean", "compileTestScala", "compileIntegrationTestScala", "check")
    tasks.findByName("check").mustRunAfter("clean")
}


task aggregatedScalaDoc(type: ScalaDoc) {
    description('Unified Scaladoc for bson-scala and driver-scala')
    group('documentation')
    ext.fromProjects = [
            project(':bson-scala'),
            project(':driver-scala')
    ]
    destinationDir = file("${rootProject.buildDir.path}/docs/${project.archivesBaseName}")
    classpath = project.sourceSets.main.compileClasspath
    source = fromProjects.collect { it.sourceSets.main.allSource }

    scalaDocOptions.additionalParameters = ["-doc-root-content", "${project.rootDir}/driver-scala/rootdoc.txt" as String]
}
project.parent.tasks.named("docs"){ it.dependsOn(aggregatedScalaDoc) }

configurations {
    integrationTestImplementation {
        extendsFrom testImplementation
        canBeResolved = true
    }
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.scala.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.integrationTestImplementation ]
    }
}


ext {
    pomName = 'Mongo Scala Driver'
}

afterEvaluate {
    jar.manifest.attributes['Automatic-Module-Name'] = 'org.mongodb.driver.scala'
    jar.manifest.attributes['Import-Package'] = [
            '!scala.*',
            '*'
    ].join(',')
}
