/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id 'com.github.gmazzo.buildconfig' version '3.0.3'
}

archivesBaseName = 'mongodb-driver-core'
description = 'Shared components for the Synchronous and Reactive Streams implementations of the MongoDB Java Driver.'

ext {
    pomName = 'MongoDB Java Driver Core'
}

configurations {
    consumableTestRuntimeOnly {
        extendsFrom testRuntimeOnly
        canBeConsumed = true
    }
}

task listConfigurations {
    doLast {
        configurations.each { config ->
            println config.name
        }
    }
}

java {
    registerFeature('bsonKotlin') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('bsonKotlinx') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('mongodbCrypt') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('jnrUnixsocket') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('nettyBuffer') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('nettyTransport') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('nettyHandler') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('awssdkAuth') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('awssdkSts') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('awsJavaSdkCore') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('awsJavaSdkSts') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('snappyJava') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('zstdJni') {
        usingSourceSet(sourceSets.main)
    }

}

def classifiers = ["linux-x86_64", "linux-aarch_64", "osx-x86_64", "osx-aarch_64", "windows-x86_64"]
dependencies {
    api project(path: ':bson', configuration: 'default')
    implementation project(path: ':bson-record-codec', configuration: 'default')

    bsonKotlinImplementation project(path: ':bson-kotlin', configuration: 'default')
    bsonKotlinxImplementation project(path: ':bson-kotlinx', configuration: 'default')

    mongodbCryptApi project(path: ':mongodb-crypt', configuration: 'default')
    jnrUnixsocketImplementation "com.github.jnr:jnr-unixsocket:$jnrUnixsocketVersion"

    api platform("io.netty:netty-bom:$nettyVersion")
    nettyBufferImplementation "io.netty:netty-buffer"
    nettyTransportImplementation "io.netty:netty-transport"
    nettyHandlerImplementation "io.netty:netty-handler"

    compileOnly "org.graalvm.sdk:graal-sdk:$graalSdkVersion"

    // Optionally depend on both AWS SDK v2 and v1.  The driver will use v2 is present, v1 if present, or built-in functionality if
    // neither are present
    awssdkAuthImplementation "software.amazon.awssdk:auth:$awsSdkV2Version"
    awssdkStsImplementation "software.amazon.awssdk:sts:$awsSdkV2Version"
    awsJavaSdkCoreImplementation "com.amazonaws:aws-java-sdk-core:$awsSdkV1Version"
    awsJavaSdkStsImplementation "com.amazonaws:aws-java-sdk-sts:$awsSdkV1Version"

    snappyJavaImplementation "org.xerial.snappy:snappy-java:$snappyVersion"
    zstdJniImplementation "com.github.luben:zstd-jni:$zstdVersion"

    testImplementation project(':bson').sourceSets.test.output
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation("org.reflections:reflections:$reflectionsVersion")
    testRuntimeOnly "io.netty:netty-tcnative-boringssl-static"

    classifiers.forEach {
        testRuntimeOnly "io.netty:netty-tcnative-boringssl-static::$it"
    }
}

buildConfig {
    className('MongoDriverVersion')
    packageName('com.mongodb.internal.build')
    useJavaOutput()
    buildConfigField('String', 'NAME', '"mongo-java-driver"')
    buildConfigField('String', 'VERSION', "\"${gitVersion}\"")
}

afterEvaluate {
    jar.manifest.attributes['Automatic-Module-Name'] = 'org.mongodb.driver.core'
    jar.manifest.attributes['Bundle-SymbolicName'] = 'org.mongodb.driver-core'
    jar.manifest.attributes['Import-Package'] = [
            '!sun.misc.*',  // Used by DirectBufferDeallocator only for java 8
            '!sun.nio.ch.*',  // Used by DirectBufferDeallocator only for java 8
            '!javax.annotation.*', // Brought in by com.google.code.findbugs:annotations
            '!com.oracle.svm.core.annotate.*', // this dependency is provided by the GraalVM runtime
            'io.netty.*;resolution:=optional',
            'com.amazonaws.*;resolution:=optional',
            'software.amazon.awssdk.*;resolution:=optional',
            'org.xerial.snappy.*;resolution:=optional',
            'com.github.luben.zstd.*;resolution:=optional',
            'org.slf4j.*;resolution:=optional',
            'jnr.unixsocket.*;resolution:=optional',
            'com.mongodb.internal.crypt.capi.*;resolution:=optional',
            'jdk.net.*;resolution:=optional', // Used by SocketStreamHelper & depends on JDK version
            'org.bson.codecs.record.*;resolution:=optional', // Depends on JDK version
            'org.bson.codecs.kotlin.*;resolution:=optional',
            'org.bson.codecs.kotlinx.*;resolution:=optional',
            '*' // import all that is not excluded or modified before
    ].join(',')
}
