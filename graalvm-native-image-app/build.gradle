/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Note requires a Gradle project flag `-PincludeGraalvm` (see settings.gradle).

plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.23'
}

application {
    mainClass = 'com.mongodb.internal.graalvm.NativeImageApp'
}

def systemPropertiesForRunningNativeApp = System.getProperties().findAll { it.key.toString().startsWith("org.mongodb.") }
tasks.matching { it.name == 'run' }.configureEach {
    systemProperties(systemPropertiesForRunningNativeApp)
}

// see https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html
graalvmNative {
    metadataRepository {
        enabled = false
    }
    agent {
        // Executing the `run` Gradle task with the tracing agent
        // https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/
        // requires running Gradle with GraalVM despite the toolchain for the task already being GraalVM.
        // The same is true about executing the `metadataCopy` Gradle task.
        // This may be a manifestation of an issue with the `org.graalvm.buildtools.native` plugin.
        enabled = false
        defaultMode = 'direct'
        def taskExecutedWithAgentAttached = 'run'
        modes {
            direct {
                // see https://www.graalvm.org/latest/reference-manual/native-image/metadata/ExperimentalAgentOptions
                options.add("config-output-dir=$buildDir/native/agent-output/$taskExecutedWithAgentAttached")
                // `experimental-configuration-with-origins` produces
                // `graalvm-native-image-app/build/native/agent-output/run/reflect-origins.txt`
                // and similar files that explain the origin of each of the reachability metadata piece.
                // However, for some reason, the actual reachability metadata is not generated when this option is enabled,
                // so enable it manually if you need an explanation for a specific reachability metadata entry,
                // and expect the build to fail.
                // options.add('experimental-configuration-with-origins')

                // `experimental-class-define-support` does not seem to do what it is supposed to do.
                // We need this option to work if we want to support `UnixServerAddress` in native image.
                // Unfortunately, the tracing agent neither generates the metadata in
                // `graalvm-native-image-app/src/main/resources/META-INF/native-image/proxy-config.json`,
                // nor does it extract the bytecode of the generated classes to
                // `graalvm-native-image-app/src/main/resources/META-INF/native-image/agent-extracted-predefined-classes`.
                options.add('experimental-class-define-support')
            }
        }
        metadataCopy {
            inputTaskNames.add(taskExecutedWithAgentAttached)
            outputDirectories.add('src/main/resources/META-INF/native-image')
            mergeWithExisting = false
        }
    }
    binaries {
        configureEach {
            buildArgs.add('--strict-image-heap')
            buildArgs.add('-H:+UnlockExperimentalVMOptions')
            // see class initialization and other reports in `graalvm/build/native/nativeCompile/reports`
            buildArgs.add('--diagnostics-mode')
            // see the "registerResource" entries in the `native-image` built-time output,
            // informing us on the resources included in the native image being built
            buildArgs.add('-H:Log=registerResource:5')
        }
        main {
            sharedLibrary = false
            def mainClassName = application.mainClass.get()
            imageName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1, mainClassName.length())
            runtimeArgs.addAll(systemPropertiesForRunningNativeApp.entrySet()
                    .stream()
                    .map {"-D${it.getKey()}=${it.getValue()}" }
                    .toList())
            quickBuild = true
            // See the "Apply" entries in the `native-image` built-time output, informing us on
            // the build configuration files (https://www.graalvm.org/latest/reference-manual/native-image/overview/BuildConfiguration/)
            // and the reachability metadata files (https://www.graalvm.org/latest/reference-manual/native-image/metadata/)
            // which are applied at build time.
            verbose = true
        }
    }
}

dependencies {
    // we intentionally depend here on the driver artifacts instead of depending on compiled classes
    implementation project(path:':bson', configuration:'archives')
    implementation project(path:':driver-core', configuration:'archives')
    implementation project(path:':driver-sync', configuration:'archives')
    implementation project(path:':driver-reactive-streams', configuration:'archives')
    implementation project(path:':driver-legacy', configuration:'archives')
    implementation project(path: ':mongodb-crypt', configuration: 'archives')
    implementation project(path: ':mongodb-crypt', configuration: 'runtimeElements')
    // note that as a result of these `sourceSets` dependencies, `driver-sync/src/test/resources/logback-test.xml` is used
    implementation project(':driver-core').sourceSets.test.output
    implementation project(':driver-sync').sourceSets.test.output
    implementation project(':driver-legacy').sourceSets.test.output
    implementation project(':driver-reactive-streams').sourceSets.test.output
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation platform("io.projectreactor:reactor-bom:$projectReactorVersion")
    implementation 'io.projectreactor:reactor-core'
    implementation "org.graalvm.sdk:nativeimage:$graalSdkVersion"
}
