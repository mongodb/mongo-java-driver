/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("eclipse")
    id("idea")

    alias(libs.plugins.bnd) apply false
    alias(libs.plugins.detekt) apply false
    alias(libs.plugins.dokka) apply false
    alias(libs.plugins.download) apply false
    alias(libs.plugins.kotlin) apply false
    alias(libs.plugins.kotlin.serialization) apply false
    alias(libs.plugins.optional) apply false
    alias(libs.plugins.scala.multiversion) apply false
    alias(libs.plugins.spotbugs) apply false
    alias(libs.plugins.spotless) apply false
    alias(libs.plugins.test.logger) apply false
}

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

ext {
    configDir = new File(rootDir, 'config')
    gitVersion = getGitVersion()
}

def configDir = ext.configDir
def utilProjects = project(":util").allprojects
def coreProjects = subprojects - utilProjects
def scalaProjects = subprojects.findAll { it.name.contains('scala') }
def javaProjects = subprojects - scalaProjects
def javaMainProjects = javaProjects - utilProjects
def javaCodeCheckedProjects = javaMainProjects.findAll { !['driver-benchmarks', 'driver-workload-executor', 'driver-lambda'].contains(it.name) }
def javaAndScalaTestedProjects = javaCodeCheckedProjects + scalaProjects

configure(coreProjects) {
    apply plugin: 'idea'

    group = 'org.mongodb'
    version = '5.4.0-SNAPSHOT'

    repositories {
        mavenLocal()
        google()
        mavenCentral()

        // Uncomment this to test with a snapshot build of mongodb-crypt
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            content {
                includeGroup "org.mongodb"
            }
        }
    }
}

configure(javaProjects) {
    apply plugin: 'java-library'

    sourceSets {
        main {
            java.srcDirs = ['src/main']
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

}

configure(scalaProjects) {
    apply plugin: "java-library"
    apply plugin: "scala"
    apply plugin: "com.adtran.scala-multiversion-plugin"
    apply plugin: "com.diffplug.spotless"

    group = 'org.mongodb.scala'

    dependencies {
        api(libs.scala.library)
        api(libs.scala.reflect)

        testImplementation(platform(libs.junit.bom))
        testImplementation(libs.bundles.junit.vintage)
        testImplementation(libs.bundles.scalatest)
        testImplementation(libs.reflections)
    }

    test{
        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage')
        }
    }

    spotless {
        scala {
            scalafmt().configFile("$configDir/scala/scalafmt.conf")
        }
    }
    compileScala.dependsOn('spotlessApply')
    compileTestScala.dependsOn('spotlessApply')

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.deprecation = false
        if(scalaVersion.startsWith("2.11")) {
            scalaCompileOptions.additionalParameters = [
                    // support static methods in interfaces
                    "-target:jvm-1.8"
            ]
        }
        if(scalaVersion.startsWith("2.13")) {
            scalaCompileOptions.additionalParameters = [
                    "-feature",
                    "-unchecked",
                    "-language:reflectiveCalls",
                    "-Wconf:cat=deprecation:ws",
                    "-Wconf:msg=While parsing annotations in:silent",
                    "-Xlint:strict-unsealed-patmat"
            ]
        }

    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

configure(javaMainProjects) {
    apply plugin: 'nebula.optional-base'
    apply plugin: 'java-library'

    dependencies {
        compileOnly(libs.findbugs.jsr)
        api(libs.slf4j, optional)

        testImplementation(libs.findbugs.jsr)
        // https://issues.apache.org/jira/browse/GROOVY-10194
        testImplementation(libs.groovy)
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all']
    }
}

configure(javaAndScalaTestedProjects) {
    /* Testing */
    tasks.withType(Test) {
        systemProperties(System.getProperties().findAll { it.key.toString().startsWith("org.mongodb.") })
        systemProperty('jna.library.path', System.getProperty('jna.library.path'))

        project.ext.buildingWith = { propertyName ->
            project.hasProperty(propertyName) && project.property(propertyName).toBoolean()
        }

        if (project.buildingWith('ssl.enabled')) {
            if (project.hasProperty('ssl.keyStoreType')) {
                systemProperties(
                        'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                        'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                        'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword')
                )
            }
            if (project.hasProperty('ssl.trustStoreType')) {
                systemProperties(
                        'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                        'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                        'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
                )
            }
            if (project.hasProperty('ocsp.property')) {
                systemProperties(
                        'org.mongodb.test.ocsp.tls.should.succeed': project.property('ocsp.tls.should.succeed'),
                        'java.security.properties': file(project.property('ocsp.property')),
                        'com.sun.net.ssl.checkRevocation': project.property('ssl.checkRevocation'),
                        'jdk.tls.client.enableStatusRequestExtension': project.property('client.enableStatusRequestExtension'),
                        'jdk.tls.client.protocols': project.property('client.protocols')
                )
            }
        }

        if (project.buildingWith('gssapi.enabled')) {
            systemProperties(
                    'sun.security.krb5.debug': project.getProperty('sun.security.krb5.debug'),
                    'javax.security.auth.useSubjectCredsOnly': "false",
                    'java.security.krb5.kdc': project.getProperty('krb5.kdc'),
                    'java.security.krb5.realm': project.getProperty('krb5.realm'),
                    'java.security.auth.login.config': project.getProperty('auth.login.config'),
            )
        }
    }
}

configure(javaCodeCheckedProjects) {
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'com.adarshr.test-logger'

    dependencies {
        testImplementation(platform(libs.junit.bom))
        testImplementation(libs.bundles.junit.vintage)

        testImplementation(platform(libs.spock.bom))
        testImplementation(libs.bundles.spock)

        if ('8'.equals(findProperty("javaVersion"))) {
            testImplementation(libs.bundles.mockito.java8)
        } else {
            testImplementation(libs.bundles.mockito)
        }
        testImplementation(libs.cglib)
        testImplementation(libs.objenesis)
        testImplementation project(':util:spock') //Adding categories to classpath
    }

    sourceSets {
        test {
            groovy.srcDirs = ['src/test/functional', 'src/test/unit']
        }
    }

    /* Testing */
    tasks.withType(Test) {
        maxHeapSize = "4g"
        maxParallelForks = 1

        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage', 'spock')
            excludeTags('Slow')
        }
        systemProperty('spock.configuration', "${configDir}/spock/ExcludeSlow.groovy")

        jacoco { enabled = false }

        testLogging {
            exceptionFormat = 'full'
            events("passed", "skipped", "failed")
        }

        testlogger {
            theme 'standard'
            showExceptions false
            showStackTraces false
            showFullStackTraces false
        }
    }

    task testSlowOnly(type: Test) {
        dependsOn('testSlowGroovy')
        useJUnitPlatform {
            includeEngines('junit-jupiter', 'junit-vintage')
            includeTags('Slow')
        }
    }

    task testSlowGroovy(type: Test) {
        useJUnitPlatform {
            includeEngines( 'spock')
        }
        systemProperty('spock.configuration', "${configDir}/spock/OnlySlow.groovy")
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(testCoverage)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testCoverage(dependsOn: test)

    /* Code quality */
    tasks.withType(Checkstyle) {
        reports {
            xml.required = true
            html.required = true
        }
    }

    checkstyle {
        toolVersion = "9.1"
    }

    spotbugs {
        if (!project.buildingWith('ssdlcReport.enabled')) {
            excludeFilter = new File(configDir, 'spotbugs/exclude.xml')
        }
    }

    codenarc {
        toolVersion = '1.6.1'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    spotbugsMain {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
            sarif.enabled = project.buildingWith('ssdlcReport.enabled')
        }
    }

    spotbugsTest {
        enabled = false
    }
}

def getGitVersion() {
    def describeStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always', '--dirty'
        standardOutput = describeStdOut
    }
    describeStdOut.toString().substring(1).trim()
}

apply from: 'gradle/javaToolchain.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/deploy.gradle'
apply from: 'gradle/javadoc.gradle'
